////////////////////////////////////////////////////////////////////////////////
// First Cinder Application - Changing the Background Color
//
// by Giovanni Dicanio
////////////////////////////////////////////////////////////////////////////////


#include "cinder/app/AppNative.h"
#include "cinder/gl/gl.h"

using namespace ci;
using namespace ci::app;
using namespace std;

// This class represents our Cinder application.
class HelloCinderApp : public AppNative 
{
public:
	void setup();
	void mouseDown( MouseEvent event );	
	void update();
	void draw();
};


void HelloCinderApp::setup()
{
    // Generated by TinderBox -- Nothing to do here.
}

void HelloCinderApp::mouseDown( MouseEvent event )
{
    // Generated by TinderBox -- Nothing to do here.
}

void HelloCinderApp::update()
{
    // Generated by TinderBox -- Nothing to do here.
}

void HelloCinderApp::draw()
{
    //
    // *** Drawing Code Goes Here ***
    //


    // Get a time-sine-oscillating hue value,
    // "normalized" in range [0, 1]
	float hue = static_cast<float>(sin(getElapsedSeconds()) * 0.5 + 0.5);

    // NOTE: The static_cast<> is not strictly necessary.
    // It just silences the compiler from emitting a warning about
    // "double to float conversion: possible loss of data".
    // Using that cast, we make it clear to the compiler that the
    // conversion from double (returned by the sin() call)
    // to float (the "hue" variable) is fine.


    // Clear the window background with a color 
    // having the specified hue
    gl::clear( Color( CM_HSV, hue, 1, 1 ) ); 
}

CINDER_APP_NATIVE( HelloCinderApp, RendererGl )

////////////////////////////////////////////////////////////////////////////////
